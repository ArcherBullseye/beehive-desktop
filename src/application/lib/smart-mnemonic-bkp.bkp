
const DEFAULT_NUMBER_OF_WORDS = 15;

const { WORDLIST } = require('./mnemonic/wordlist_english.js');
const mnemonic = new Mnemonic(WORDLIST);
const seed = null;
const bip32RootKey = null;
const bip32ExtendedKey = null;

const BIP = {
    BIP_32: 'BIP_32',
    BIP_44: 'BIP_44',
};

const network = {
    messagePrefix: '\x18SmartCash Signed Message:\n',
    bip32: {
        public: 0x0488b21e,
        private: 0x0488ade4,
    },
    pubKeyHash: 0x3f,
    scriptHash: 0x12,
    wif: 0xbf,
};

export function importWords({ phrase, passphrase }) {
    // Get the mnemonic phrase
    var errorText = findPhraseErrors(phrase);
    if (errorText) {
        return Error(errorText);
    }
    // Calculate and display

    seed = calcBip32RootKeyFromSeed(phrase, passphrase);
    calcForDerivationPath();
    // Show the word indexes
    showWordIndexes({ phrase: phrase });
}

function showWordIndexes({ phrase }) {
    var words = phraseToWordArray(phrase);
    var wordIndexes = [];
    for (var i = 0; i < words.length; i++) {
        var word = words[i];
        var wordIndex = WORDLIST.indexOf(word);
        wordIndexes.push(wordIndex);
    }
    var wordIndexesStr = wordIndexes.join(', ');
    return wordIndexesStr;
}

function calcForDerivationPath() {
    // Get the derivation path
    var derivationPath = getDerivationPath({ bip: BIP.BIP_44 });
    var errorText = findDerivationPathErrors(derivationPath);
    if (errorText) {
        return Error(errorText);
    }

    return {
        bip32ExtendedKey: calcBip32ExtendedKey(derivationPath),
        BIP_44: displayBip44Info(){},
        BIP_32: displayBip32Info(),
    };
}

function displayBip44Info() {
    // Get the derivation path for the account
    var purpose = 44;
    var coin = 224;
    var account = 0;
    var path = 'm/';
    path += purpose + "'/";
    path += coin + "'/";
    path += account + "'/";
    // Calculate the account extended keys
    var accountExtendedKey = calcBip32ExtendedKey(path);
    var accountXprv = accountExtendedKey.toBase58();
    var accountXpub = accountExtendedKey.neutered().toBase58();
    // Display the extended keys
    return {
        accountXprv: accountXprv,
        accountXpub: accountXpub,
    };
}

function displayBip32Info() {
    // Display the key

    var rootKey = bip32RootKey.toBase58();
    var xprvkeyB58 = 'NA';
    if (!bip32ExtendedKey.isNeutered()) {
        xprvkeyB58 = bip32ExtendedKey.toBase58();
    }
    var extendedPrivKey = xprvkeyB58;
    var extendedPubKey = bip32ExtendedKey.neutered().toBase58();

    return {
        rootKey,
        extendedPrivKey,
        extendedPubKey,
        addresses: getAddressesFromDerived(0, 10),
    };
}

function getAddressesFromDerived(start, total) {
    const addresses = [];
    for (var i = 0; i < total; i++) {
        var index = i + start;
        addresses.push(new calcAddressesFromDerived({ index: index }));
    }
    return addresses;
}

function calcAddressesFromDerived({ index, useHardenedAddresses = false, useBip38 = false, bip38password = '' }) {
    // derive HDkey for this row of the table
    var key = 'NA';
    if (useHardenedAddresses) {
        key = bip32ExtendedKey.deriveHardened(index);
    } else {
        key = bip32ExtendedKey.derive(index);
    }
    // bip38 requires uncompressed keys
    // see https://github.com/iancoleman/bip39/issues/140#issuecomment-352164035
    var keyPair = key.keyPair;
    var useUncompressed = useBip38;
    if (useUncompressed) {
        keyPair = new smartcash.ECPair(keyPair.d);
    }
    // get address
    var address = keyPair.getAddress().toString();
    // get privkey
    var hasPrivkey = !key.isNeutered();
    var privkey = 'NA';
    if (hasPrivkey) {
        privkey = keyPair.toWIF();
        // BIP38 encode private key if required
        if (useBip38) {
            privkey = bitcoinjsBip38.encrypt(keyPair.d.toBuffer(), false, bip38password, function (p) {
                console.log('Progressed ' + p.percent.toFixed(1) + '% for index ' + index);
            });
        }
    }
    // get pubkey
    var pubkey = keyPair.getPublicKeyBuffer().toString('hex');
    var indexText = getDerivationPath() + '/' + index;
    if (useHardenedAddresses) {
        indexText = indexText + "'";
    }

    return { indexText, address, pubkey, privkey };
}

function findDerivationPathErrors({ path, bip = BIP.BIP_44, hardened = false }) {
    // TODO is not perfect but is better than nothing
    // Inspired by
    // https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#test-vectors
    // and
    // https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#extended-keys
    var maxDepth = 255; // TODO verify this!!
    var maxIndexValue = Math.pow(2, 31); // TODO verify this!!
    if (path[0] != 'm') {
        return "First character must be 'm'";
    }
    if (path.length > 1) {
        if (path[1] != '/') {
            return "Separator must be '/'";
        }
        var indexes = path.split('/');
        if (indexes.length > maxDepth) {
            return 'Derivation depth is ' + indexes.length + ', must be less than ' + maxDepth;
        }
        for (var depth = 1; depth < indexes.length; depth++) {
            var index = indexes[depth];
            var invalidChars = index.replace(/^[0-9]+'?$/g, '');
            if (invalidChars.length > 0) {
                return 'Invalid characters ' + invalidChars + ' found at depth ' + depth;
            }
            var indexValue = parseInt(index.replace("'", ''));
            if (isNaN(depth)) {
                return 'Invalid number at depth ' + depth;
            }
            if (indexValue > maxIndexValue) {
                return 'Value of ' + indexValue + ' at depth ' + depth + ' must be less than ' + maxIndexValue;
            }
        }
    }
    // Check root key exists or else derivation path is useless!
    if (!bip32RootKey) {
        return 'No root key';
    }
    // Check no hardened derivation path when using xpub keys
    var hardenedPath = path.indexOf("'") > -1;
    var hardenedAddresses = bip === BIP.BIP_32 && hardened;
    var hardened = hardenedPath || hardenedAddresses;
    var isXpubkey = bip32RootKey.isNeutered();
    if (hardened && isXpubkey) {
        return 'Hardened derivation path is invalid with xpub key';
    }
    return false;
}

export function generateRandomWords() {
    // get the amount of entropy to use
    const numWords = parseInt(DEFAULT_NUMBER_OF_WORDS);
    const strength = (numWords / 3) * 32;
    const buffer = new Uint8Array(strength / 8);
    // create secure entropy
    const data = crypto.getRandomValues(buffer);
    // show the words
    const words = mnemonic.toMnemonic(data);

    return words;
}

function calcBip32RootKeyFromSeed(phrase, passphrase) {
    seed = mnemonic.toSeed(phrase, passphrase);
    bip32RootKey = smartcash.HDNode.fromSeedHex(seed);
}

function calcBip32RootKeyFromBase58(rootKeyBase58) {
    // try the network params as currently specified
    bip32RootKey = smartcash.HDNode.fromBase58(rootKeyBase58);
}

function calcBip32ExtendedKey(path) {
    // Check there's a root key to derive from
    if (!bip32RootKey) {
        return bip32RootKey;
    }
    var extendedKey = bip32RootKey;
    // Derive the key from the path
    var pathBits = path.split('/');
    for (var i = 0; i < pathBits.length; i++) {
        var bit = pathBits[i];
        var index = parseInt(bit);
        if (isNaN(index)) {
            continue;
        }
        var hardened = bit[bit.length - 1] == "'";
        var isPriv = !extendedKey.isNeutered();
        var invalidDerivationPath = hardened && !isPriv;
        if (invalidDerivationPath) {
            extendedKey = null;
        } else if (hardened) {
            extendedKey = extendedKey.deriveHardened(index);
        } else {
            extendedKey = extendedKey.derive(index);
        }
    }
    return extendedKey;
}

export function findPhraseErrors(phrase) {
    // Preprocess the words
    phrase = mnemonic.normalizeString(phrase);
    var words = phraseToWordArray(phrase);
    // Detect blank phrase
    if (words.length == 0) {
        return 'Blank mnemonic';
    }
    // Check each word
    for (var i = 0; i < words.length; i++) {
        var word = words[i];
        if (WORDLIST.indexOf(word) == -1) {
            console.log('Finding closest match to ' + word);
            var nearestWord = findNearestWord(word);
            return word + ' not in wordlist, did you mean ' + nearestWord + '?';
        }
    }
    // Check the words are valid
    var properPhrase = wordArrayToPhrase(words);
    var isValid = mnemonic.check(properPhrase);
    if (!isValid) {
        return 'Invalid mnemonic';
    }
    return false;
}

function validateRootKey(rootKeyBase58) {
    // try the network params as currently specified
    try {
        smartcash.HDNode.fromBase58(rootKeyBase58);
    } catch (e) {
        return 'Invalid root key';
    }
    return '';
}

function findNearestWord(word) {
    var words = WORDLIST;
    var minDistance = 99;
    var closestWord = words[0];
    for (var i = 0; i < words.length; i++) {
        var comparedTo = words[i];
        if (comparedTo.indexOf(word) == 0) {
            return comparedTo;
        }

        var distance = Levenshtein.get(word, comparedTo);
        if (distance < minDistance) {
            closestWord = comparedTo;
            minDistance = distance;
        }
    }
    return closestWord;
}

function phraseToWordArray(phrase) {
    var words = phrase.split(/\s/g);
    var noBlanks = [];
    for (var i = 0; i < words.length; i++) {
        var word = words[i];
        if (word.length > 0) {
            noBlanks.push(word);
        }
    }
    return noBlanks;
}

function wordArrayToPhrase(words) {
    return words.join(' ');
}

function uint8ArrayToHex(a) {
    var s = '';
    for (var i = 0; i < a.length; i++) {
        var h = a[i].toString(16);
        while (h.length < 2) {
            h = '0' + h;
        }
        s = s + h;
    }
    return s;
}

function getDerivationPath({ bip = BIP.BIP_44 }) {
    if (bip === BIP.BIP_44) {
        var purpose = 44;
        var coin = 224;
        var account = 0;
        var change = 0;
        var path = 'm/';
        path += purpose + "'/";
        path += coin + "'/";
        path += account + "'/";
        path += change;
        var derivationPath = path;
        console.log('Using derivation path from BIP44 tab: ' + derivationPath);
        return derivationPath;
    } else if (bip === BIP.BIP_32) {
        var derivationPath = 'm/0';
        console.log('Using derivation path from BIP32 tab: ' + derivationPath);
        return derivationPath;
    } else {
        console.log('Unknown derivation path');
    }
}
